from django.contrib.auth import get_user_model
from rest_framework import generics, permissions
from rest_framework.exceptions import PermissionDenied
from .models import Projet, Tache
from .serializers import ProjetSerializer, TacheSerializer

# recuoerer le model utilisateur
Utilisateur = get_user_model()

# vue pour lister les prohets
class ProjetListCreateView(generics.ListCreateAPIView):
    serializer_class = ProjetSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """Retourne uniquement les projets crÃ©Ã©s par le professeur connectÃ©"""
        user = self.request.user
        if not user.is_professeur():
            raise PermissionDenied("Vous n'avez pas l'autorisation d'accÃ©der aux projets.")
        return Projet.objects.filter(professeur=user)

    def perform_create(self, serializer):
        """Assigne automatiquement le professeur connectÃ© au projet"""
        user = self.request.user
        if not user.is_professeur():
            raise PermissionDenied("Seuls les professeurs peuvent crÃ©er des projets.")
        serializer.save(professeur=user)

#pour recuperer les projet
class ProjetDetailView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = ProjetSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """Seuls les crÃ©ateurs du projet peuvent voir/modifier leurs projets"""
        user = self.request.user
        return Projet.objects.filter(professeur=user)

# vue pour creer une tache
class TacheListCreateView(generics.ListCreateAPIView):
    serializer_class = TacheSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """Retourne les tÃ¢ches du professeur ou celles assignÃ©es Ã  un Ã©tudiant, filtrÃ©es par projet si nÃ©cessaire"""
        user = self.request.user
        queryset = Tache.objects.all()

        projet_id = self.request.query_params.get('projet')
        if projet_id:
            queryset = queryset.filter(projet_id=projet_id)

        if user.is_professeur():
            return queryset.filter(projet__professeur=user).select_related('utilisateur')
        return queryset.filter(utilisateur=user).select_related('utilisateur')
    


    def perform_create(self, serializer):
        """Assigne une tÃ¢che uniquement Ã  un Ã©tudiant"""
        user = self.request.user
        data = self.request.data

        print("ğŸ”¹ Utilisateur authentifiÃ© :", user, "Role :", getattr(user, 'role', 'Non dÃ©fini'))
        print("ğŸ“Œ DonnÃ©es reÃ§ues :", data)

        if not user.is_professeur():
            raise PermissionDenied("Seuls les professeurs peuvent assigner des tÃ¢ches.")

        # âœ… VÃ©rifier et rÃ©cupÃ©rer le projet
        projet_id = data.get('projet')
        try:
            projet_instance = Projet.objects.get(id=projet_id)
        except Projet.DoesNotExist:
            raise PermissionDenied("Projet non trouvÃ©.")

        # âœ… VÃ©rifier et rÃ©cupÃ©rer l'Ã©tudiant
        utilisateur_id = data.get('utilisateur')
        if not utilisateur_id:
            raise PermissionDenied("Un Ã©tudiant doit Ãªtre assignÃ© Ã  la tÃ¢che.")

        try:
            utilisateur_instance = Utilisateur.objects.get(id=utilisateur_id)  # âœ… Correction ici
        except Utilisateur.DoesNotExist:
            raise PermissionDenied("L'utilisateur sÃ©lectionnÃ© n'existe pas.")

        # âœ… VÃ©rifier que ce n'est pas un professeur
        if utilisateur_instance.is_professeur():
            raise PermissionDenied("Vous ne pouvez assigner une tÃ¢che qu'Ã  un Ã©tudiant.")

        print(f"âœ… CrÃ©ation tÃ¢che -> Projet: {projet_instance.id}, Ã‰tudiant: {utilisateur_instance.nom}")

        # âœ… Sauvegarde de la tÃ¢che avec l'Ã©tudiant assignÃ©
        serializer.save(projet=projet_instance, utilisateur=utilisateur_instance)

# âœ… Vue pour rÃ©cupÃ©rer, mettre Ã  jour ou supprimer une tÃ¢che
class TacheDetailView(generics.RetrieveUpdateDestroyAPIView):
    serializer_class = TacheSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        """Restreint l'accÃ¨s aux tÃ¢ches du professeur ou de l'Ã©tudiant assignÃ©"""
        user = self.request.user
        if user.is_professeur():
            return Tache.objects.filter(projet__professeur=user).select_related('utilisateur')
        return Tache.objects.filter(utilisateur=user).select_related('utilisateur')
